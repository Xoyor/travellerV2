import java.util.*; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ library ‡∏Ç‡∏≠‡∏á Java utilities ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArrayList, Collections ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
import javax.swing.*;// library ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á GUI ‡∏î‡πâ‡∏ß‡∏¢ Swing
import java.awt.*;// library ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á GUI ‡∏î‡πâ‡∏ß‡∏¢ AWT
import java.awt.event.*;// library ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡∏ï‡πà‡∏≤‡∏á‡πÜ

// Class 1: Person - stores individual expense data (Encapsulation)
class Person { // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ Person
    private String name; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ private ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠
    private double amount; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ private ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô

    // ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Constructor
    public Person(String name, double amount) { // ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
        // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á this ‡∏à‡∏∞‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á attribute ‡∏Ç‡∏≠‡∏á class Person
        this.name = name; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠
        this.amount = amount; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    } // ‡∏õ‡∏¥‡∏î constructor

    public String getName() { // method getter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠
        return name; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠
    } // ‡∏õ‡∏¥‡∏î method getName

    public double getAmount() { // method getter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
        return amount; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    } // ‡∏õ‡∏¥‡∏î method getAmount

    @Override // annotation ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö override method
    public String toString() { // method ‡πÅ‡∏õ‡∏•‡∏á object ‡πÄ‡∏õ‡πá‡∏ô String
        return name + " - " + String.format("%.2f", amount) + " ‡∏ø"; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏ä‡∏∑‡πà‡∏≠ - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡∏ø"
    } // ‡∏õ‡∏¥‡∏î method toString
} // ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏•‡∏≤‡∏™ Person

// Class 2: ExpenseCalculator - handles all calculations
class ExpenseCalculator { // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ ExpenseCalculator
    private ArrayList<Person> people;// ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ArrayList<Person> ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Class ‡∏´‡∏•‡∏±‡∏Å ‡∏Ñ‡∏∑‡∏≠
                                     // EnhancedTravelExpenseSplitter

    // Constructor ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ ArrayList<Person> people ‡∏à‡∏≤‡∏Å class ‡∏´‡∏•‡∏±‡∏Å
    public ExpenseCalculator(ArrayList<Person> people) { // ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ArrayList ‡∏Ç‡∏≠‡∏á Person
        this.people = people; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ ArrayList ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
    } // ‡∏õ‡∏¥‡∏î constructor

    // Calculation Function 1: Calculate total expenses
    public double calculateTotal() { // method ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        double total = 0.0; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 0
        for (Person person : people) { // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            total += person.getAmount(); // ‡∏ö‡∏ß‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        } // ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ for
        return total; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
    } // ‡∏õ‡∏¥‡∏î method calculateTotal

    // Calculation Function 2: Calculate average per person
    public double calculateAverage() { // method ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        // ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤ people ‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏´‡∏°/‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏´‡∏°‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ people
        // return ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏â‡∏•‡∏µ‡πà‡∏¢ ? ‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ if else ‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ ‡∏ñ‡πâ‡∏≤ false ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞ ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤
        // CalculateTotal() ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡∏°‡∏≤‡∏´‡∏≤‡∏£‡∏Å‡∏±‡∏ô
        // CalculateTotal()(‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î) / people.size()(‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô)
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô true ‡∏à‡∏∞ return 0
        return people.isEmpty() ? 0 : calculateTotal() / people.size(); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0 ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    } // ‡∏õ‡∏¥‡∏î method calculateAverage

    // Calculation Function 3: Calculate individual balances
    public String calculateSplit() { // method ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
        if (people.isEmpty()) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            return "No data to calculate."; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        double avg = calculateAverage(); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        StringBuilder result = new StringBuilder(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á StringBuilder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        result.append("üí∞ EXPENSE SPLIT CALCULATION üí∞\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
        result.append("Total: ").append(String.format("%.2f", calculateTotal())).append(" ‡∏ø\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        result.append("Average: ").append(String.format("%.2f", avg)).append(" ‡∏ø\n\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢

        for (Person p : people) { // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
            double balance = p.getAmount() - avg; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            if (balance > 0.01) { // ‡∏ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                result.append("üíö ").append(p.getName()).append(" receives ")
                        .append(String.format("%.2f", balance)).append(" ‡∏ø\n"); // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏∑‡∏ô
            } else if (balance < -0.01) { // ‡∏ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                result.append("üí∏ ").append(p.getName()).append(" pays ")
                        .append(String.format("%.2f", -balance)).append(" ‡∏ø\n"); // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°
            } else { // ‡∏ñ‡πâ‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏≠‡∏î‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
                result.append("‚úÖ ").append(p.getName()).append(" is settled\n"); // ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            } // ‡∏õ‡∏¥‡∏î else
        } // ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ for
        return result.toString(); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö String
    } // ‡∏õ‡∏¥‡∏î method calculateSplit

    // Calculation Function 4: Calculate statistics
    public String calculateStatistics() { // method ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        if (people.isEmpty()) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            return "No data for statistics."; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        double total = calculateTotal(); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        double avg = calculateAverage(); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        Person maxSpender = people.stream().max(Comparator.comparing(Person::getAmount)).orElse(null); // ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        Person minSpender = people.stream().min(Comparator.comparing(Person::getAmount)).orElse(null); // ‡∏´‡∏≤‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î

        StringBuilder stats = new StringBuilder(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á StringBuilder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats.append("üìä STATISTICS üìä\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats.append("Participants: ").append(people.size()).append("\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
        stats.append("Total: ").append(String.format("%.2f", total)).append(" ‡∏ø\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        stats.append("Average: ").append(String.format("%.2f", avg)).append(" ‡∏ø\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
        if (maxSpender != null && minSpender != null) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÑ‡∏î‡πâ
            stats.append("Highest: ").append(maxSpender.getName()).append(" (")
                    .append(String.format("%.2f", maxSpender.getAmount())).append(" ‡∏ø)\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏à‡πà‡∏≤‡∏¢‡∏°‡∏≤‡∏Å‡∏™‡∏∏‡∏î
            stats.append("Lowest: ").append(minSpender.getName()).append(" (")
                    .append(String.format("%.2f", minSpender.getAmount())).append(" ‡∏ø)\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏à‡πà‡∏≤‡∏¢‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î
        } // ‡∏õ‡∏¥‡∏î if
        return stats.toString(); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö String
    } // ‡∏õ‡∏¥‡∏î method calculateStatistics
} // ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏•‡∏≤‡∏™ ExpenseCalculator

// Class 3: ReportGenerator - generates various reports
class ReportGenerator { // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™ ReportGenerator
    private ArrayList<Person> people; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    public ReportGenerator(ArrayList<Person> people) { // constructor ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ô
        this.people = people; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ ArrayList ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
    } // ‡∏õ‡∏¥‡∏î constructor

    public String generateDetailedReport() { // method ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        if (people.isEmpty()) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            return "No data for detailed report."; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        StringBuilder report = new StringBuilder(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á StringBuilder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report.append("üìã DETAILED EXPENSE REPORT üìã\n\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô

        for (int i = 0; i < people.size(); i++) { // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ index
            report.append(String.format("%d. %s\n", i + 1, people.get(i).toString())); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç
        } // ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ for

        return report.toString(); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö String
    } // ‡∏õ‡∏¥‡∏î method generateDetailedReport

    public String generateSummaryReport() { // method ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ
        if (people.isEmpty()) // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            return "No data for summary report."; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        ExpenseCalculator calc = new ExpenseCalculator(people); // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á ExpenseCalculator
        StringBuilder report = new StringBuilder(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á StringBuilder ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        report.append("üìä EXPENSE SUMMARY üìä\n\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ

        report.append("Total Participants: ").append(people.size()).append("\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
        report.append("Total Expenses: ").append(String.format("%.2f", calc.calculateTotal())).append(" ‡∏ø\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        report.append("Average per Person: ").append(String.format("%.2f", calc.calculateAverage())).append(" ‡∏ø\n\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢

        report.append("All Expenses:\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        for (Person p : people) { // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
            report.append("‚Ä¢ ").append(p.toString()).append("\n"); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        } // ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ for

        return report.toString(); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö String
    } // ‡∏õ‡∏¥‡∏î method generateSummaryReport
} // ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏•‡∏≤‡∏™ ReportGenerator

// Class 4: Main GUI Application with Menu Functions
public class EnhancedTravelExpenseSplitter extends JFrame implements ActionListener { // ‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI
    private ArrayList<Person> people; // ‡πÄ‡∏õ‡πá‡∏ô Object ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å ArrayList ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Person ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á
                                      // ExpenseCalculator ‡πÅ‡∏•‡∏∞ ReportGenerator
    private ExpenseCalculator calculator; // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á ExpenseCalculator
    private ReportGenerator reportGenerator; // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á ReportGenerator

    // GUI Components
    private JTextField nameField, amountField; // ‡∏ï‡∏±‡∏ß‡∏£‡∏±‡∏ö input ‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏à‡πà‡∏≤‡∏¢
    private JTextArea resultArea; // ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ

    // 2 ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ListModel ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô
    // Container ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JList ‡∏™‡πà‡∏ß‡∏ô Jlist ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    private JList<String> personList; // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
    private DefaultListModel<String> listModel; // ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô JList

    // Menu Buttons
    private JButton addBtn, removeBtn, calculateBtn, statsBtn, detailBtn, summaryBtn, clearBtn; // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡∏ï‡πà‡∏≤‡∏á‡πÜ

    public EnhancedTravelExpenseSplitter() { // constructor ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏•‡∏≤‡∏™‡∏´‡∏•‡∏±‡∏Å
        people = new ArrayList<>(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á ArrayList ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô
        calculator = new ExpenseCalculator(people); // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á ExpenseCalculator
        reportGenerator = new ReportGenerator(people); // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á ReportGenerator
        setupGUI(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GUI
    } // ‡∏õ‡∏¥‡∏î constructor

    /*********************** Method ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI **************************/
    private void setupGUI() { // method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GUI
        setTitle("üí∞ Enhanced Travel Expense Splitter"); // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        setLayout(new BorderLayout()); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ layout ‡πÄ‡∏õ‡πá‡∏ô BorderLayout

        // Input Panel (User Input Section)
        JPanel inputPanel = new JPanel(new FlowLayout()); // ‡∏™‡∏£‡πâ‡∏≤‡∏á panel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        inputPanel.setBackground(new Color(70, 130, 180)); // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á

        inputPanel.add(new JLabel("üë§ Name:") { // ‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠
            { // anonymous inner class
                setForeground(Color.WHITE); // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
            } // ‡∏õ‡∏¥‡∏î anonymous inner class
        }); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° label
        nameField = new JTextField(10); // ‡∏™‡∏£‡πâ‡∏≤‡∏á text field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠
        inputPanel.add(nameField); // ‡πÄ‡∏û‡∏¥‡πà‡∏° text field ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô panel

        inputPanel.add(new JLabel("üíµ Amount:") { // ‡∏™‡∏£‡πâ‡∏≤‡∏á label ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
            { // anonymous inner class
                setForeground(Color.WHITE); // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
            } // ‡∏õ‡∏¥‡∏î anonymous inner class
        }); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° label
        amountField = new JTextField(8); // ‡∏™‡∏£‡πâ‡∏≤‡∏á text field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
        inputPanel.add(amountField); // ‡πÄ‡∏û‡∏¥‡πà‡∏° text field ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô panel

        add(inputPanel, BorderLayout.NORTH); // ‡πÄ‡∏û‡∏¥‡πà‡∏° input panel ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô

        // Center Panel - Split View
        JPanel centerPanel = new JPanel(new GridLayout(1, 2, 10, 10)); // ‡∏™‡∏£‡πâ‡∏≤‡∏á panel ‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        centerPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ border

        // Left: Person List
        JPanel leftPanel = new JPanel(new BorderLayout()); // ‡∏™‡∏£‡πâ‡∏≤‡∏á panel ‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
        leftPanel.setBorder(BorderFactory.createTitledBorder("üë• People List")); // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ border
        listModel = new DefaultListModel<>(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á list model
        personList = new JList<>(listModel); // ‡∏™‡∏£‡πâ‡∏≤‡∏á JList ‡∏û‡∏£‡πâ‡∏≠‡∏° model
        leftPanel.add(new JScrollPane(personList), BorderLayout.CENTER); // ‡πÄ‡∏û‡∏¥‡πà‡∏° JList ‡∏û‡∏£‡πâ‡∏≠‡∏° scroll pane
        centerPanel.add(leftPanel); // ‡πÄ‡∏û‡∏¥‡πà‡∏° panel ‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô center panel

        // Right: Results
        JPanel rightPanel = new JPanel(new BorderLayout()); // ‡∏™‡∏£‡πâ‡∏≤‡∏á panel ‡∏Ç‡∏ß‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        rightPanel.setBorder(BorderFactory.createTitledBorder("üìä Results")); // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ border
        resultArea = new JTextArea(); // ‡∏™‡∏£‡πâ‡∏≤‡∏á text area ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        resultArea.setEditable(false); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        resultArea.setFont(new Font("Monospaced", Font.PLAIN, 12)); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        resultArea.setText("Welcome! Add people and expenses to start calculating."); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        rightPanel.add(new JScrollPane(resultArea), BorderLayout.CENTER); // ‡πÄ‡∏û‡∏¥‡πà‡∏° text area ‡∏û‡∏£‡πâ‡∏≠‡∏° scroll pane
        centerPanel.add(rightPanel); // ‡πÄ‡∏û‡∏¥‡πà‡∏° panel ‡∏Ç‡∏ß‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô center panel

        add(centerPanel, BorderLayout.CENTER); // ‡πÄ‡∏û‡∏¥‡πà‡∏° center panel ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á

        // Menu Panel (4+ Menu Functions)
        JPanel menuPanel = new JPanel(new GridLayout(2, 4, 5, 5)); // ‡∏™‡∏£‡πâ‡∏≤‡∏á panel ‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ö‡∏ö 2x4 grid
        menuPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ border

        // Row 1: Core Functions
        addBtn = createButton("‚ûï Add Person", new Color(34, 139, 34)); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô
        removeBtn = createButton("üóëÔ∏è Remove", new Color(220, 20, 60)); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
        calculateBtn = createButton("üìä Calculate Split", new Color(30, 144, 255)); // Menu Function 1 //
                                                                                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á
        statsBtn = createButton("üìà Statistics", new Color(255, 140, 0)); // Menu Function 2 // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥

        // Row 2: Report Functions
        detailBtn = createButton("üìã Detail Report", new Color(138, 43, 226)); // Menu Function 3 //
                                                                               // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        summaryBtn = createButton("üìä Summary Report", new Color(50, 205, 50)); // Menu Function 4 //
                                                                                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
        clearBtn = createButton("üîÑ Clear All", new Color(178, 34, 34)); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        JButton exitBtn = createButton("üö™ Exit", new Color(128, 128, 128)); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        exitBtn.addActionListener(e -> System.exit(0)); // ‡πÄ‡∏û‡∏¥‡πà‡∏° action listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°

        menuPanel.add(addBtn); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô menu panel
        menuPanel.add(removeBtn); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô menu panel
        menuPanel.add(calculateBtn); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô menu panel
        menuPanel.add(statsBtn); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô menu panel
        menuPanel.add(detailBtn); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô menu panel
        menuPanel.add(summaryBtn); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô menu panel
        menuPanel.add(clearBtn); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô menu panel
        menuPanel.add(exitBtn); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô menu panel

        add(menuPanel, BorderLayout.SOUTH); // ‡πÄ‡∏û‡∏¥‡πà‡∏° menu panel ‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á

        setSize(800, 600); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
        setLocationRelativeTo(null); // ‡∏ï‡∏±‡πâ‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏≠
        setVisible(true); // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    } // ‡∏õ‡∏¥‡∏î method setupGUI

    /*********************** Method ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI **************************/

    /*********************** Method ‡∏™‡∏£‡πâ‡∏≤‡∏á Button **************************/
    private JButton createButton(String text, Color color) { // method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
        JButton button = new JButton(text); // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        button.setBackground(color); // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        button.setForeground(Color.WHITE); // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
        button.setFocusPainted(false); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á focus border
        button.addActionListener(this); // ‡πÄ‡∏û‡∏¥‡πà‡∏° action listener
        return button; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
    } // ‡∏õ‡∏¥‡∏î method createButton

    /*********************** Method ‡∏™‡∏£‡πâ‡∏≤‡∏á Button **************************/

    // Action Handler for Menu Functions
    public void actionPerformed(ActionEvent e) { // method ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ event ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°
        if (e.getSource() == addBtn) { // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô
            addPerson(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method addPerson
        } else if (e.getSource() == removeBtn) { // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö
            removePerson(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method removePerson
        } else if (e.getSource() == calculateBtn) { // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á
            // Menu Function 1: Calculate Split (Calculation Function)
            resultArea.setText(calculator.calculateSplit()); // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢
        } else if (e.getSource() == statsBtn) { // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            // Menu Function 2: Statistics (Calculation Function)
            resultArea.setText(calculator.calculateStatistics()); // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        } else if (e.getSource() == detailBtn) { // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            // Menu Function 3: Detail Report
            resultArea.setText(reportGenerator.generateDetailedReport()); // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        } else if (e.getSource() == summaryBtn) { // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
            // Menu Function 4: Summary Report
            resultArea.setText(reportGenerator.generateSummaryReport()); // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ
        } else if (e.getSource() == clearBtn) { // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            clearAll(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method clearAll
        } // ‡∏õ‡∏¥‡∏î if-else
    } // ‡∏õ‡∏¥‡∏î method actionPerformed

    // User Input Function: Add Person
    private void addPerson() { // method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô
        try { // ‡πÄ‡∏£‡∏¥‡πà‡∏° try block
            String name = nameField.getText().trim(); // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏≤‡∏Å text field ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            String amountText = amountField.getText().trim(); // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å text field ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á

            if (name.isEmpty() || amountText.isEmpty()) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                JOptionPane.showMessageDialog(this, "Please enter both name and amount!"); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å method
            } // ‡∏õ‡∏¥‡∏î if

            double amount = Double.parseDouble(amountText); // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            if (amount < 0) { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                JOptionPane.showMessageDialog(this, "Amount cannot be negative!"); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                return; // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å method
            } // ‡∏õ‡∏¥‡∏î if

            Person person = new Person(name, amount); // ‡∏™‡∏£‡πâ‡∏≤‡∏á object Person ‡πÉ‡∏´‡∏°‡πà
            people.add(person); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô ArrayList
            updateDisplay(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•

            // Clear input fields
            nameField.setText(""); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠
            amountField.setText(""); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
            nameField.requestFocus(); // ‡πÉ‡∏´‡πâ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠

        } catch (NumberFormatException ex) { // ‡∏à‡∏±‡∏ö exception ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
            JOptionPane.showMessageDialog(this, "Please enter a valid number for amount!"); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        } // ‡∏õ‡∏¥‡∏î catch
    } // ‡∏õ‡∏¥‡∏î method addPerson

    private void removePerson() { // method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ñ‡∏ô
        int selectedIndex = personList.getSelectedIndex(); // ‡∏î‡∏∂‡∏á index ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if (selectedIndex != -1) { // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            people.remove(selectedIndex); // ‡∏•‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å ArrayList
            updateDisplay(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        } else { // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            JOptionPane.showMessageDialog(this, "Please select a person to remove!"); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        } // ‡∏õ‡∏¥‡∏î else
    } // ‡∏õ‡∏¥‡∏î method removePerson

    private void clearAll() { // method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        int confirm = JOptionPane.showConfirmDialog(this, // ‡πÅ‡∏™‡∏î‡∏á dialog ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                "Are you sure you want to clear all data?", // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏≤‡∏°
                "Confirm Clear", JOptionPane.YES_NO_OPTION); // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Yes/No
        if (confirm == JOptionPane.YES_OPTION) { // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Yes
            people.clear(); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô ArrayList
            updateDisplay(); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            resultArea.setText("All data cleared. Add people and expenses to start calculating."); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à
        } // ‡∏õ‡∏¥‡∏î if
    } // ‡∏õ‡∏¥‡∏î method clearAll

    private void updateDisplay() { // method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        listModel.clear(); // clear() ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
        for (Person person : people) { // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô listModel ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏•‡∏π‡∏õ
            listModel.addElement(person.toString()); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô listModel ‡∏ú‡πà‡∏≤‡∏ô method addElement()
        } // ‡∏õ‡∏¥‡∏î‡∏•‡∏π‡∏õ for

        // Update calculator and report generator references
        calculator = new ExpenseCalculator(people); // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á ExpenseCalculator
        reportGenerator = new ReportGenerator(people); // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á ReportGenerator
    } // ‡∏õ‡∏¥‡∏î method updateDisplay

    public static void main(String[] args) { // method main ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        SwingUtilities.invokeLater(() -> new EnhancedTravelExpenseSplitter()); // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÉ‡∏ô Event
                                                                               // Dispatch Thread
    } // ‡∏õ‡∏¥‡∏î method main
} // ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏•‡∏≤‡∏™ EnhancedTravelExpenseSplitter